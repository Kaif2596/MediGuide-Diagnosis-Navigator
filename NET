from flask import Flask, render_template, request
import pandas as pd
import numpy as np
import joblib

app = Flask(__name__)

# Load the symptom data
symptom_data = pd.read_csv('Symptom-severity.csv')

# Load the trained model
model = joblib.load('SUD.sav')
#description
symptom_description = pd.read_csv('symptom_Description.csv')

@app.route('/')
def index():
    # Retrieve search query from GET parameters
    search_query = request.args.get('search')

    # Filter symptom data based on the search query
    if search_query:
        symptom_data_filtered = symptom_data[symptom_data['Symptom'].str.contains(search_query, case=False)]
    else:
        symptom_data_filtered = symptom_data.sort_values(by='Symptom', ascending=True)

    return render_template('index.html', symptom_data=symptom_data_filtered)


@app.route('/submit', methods=['POST'])
def submit():
    selected_symptoms = []
    max_symptoms = 17

    # Retrieve selected symptoms and their weights from the form
    for i in range(max_symptoms):
        symptom_weight = request.form.get(f"symptom_{i}")
        if symptom_weight:
            selected_symptoms.append(float(symptom_weight))

    # Pad the selected symptoms if necessary
    num_selected_symptoms = len(selected_symptoms)
    if num_selected_symptoms < max_symptoms:
        selected_symptoms.extend([0.0] * (max_symptoms - num_selected_symptoms))

    # Convert selected symptoms to numpy array
    input_data = np.array(selected_symptoms).reshape(1, -1)

    # Make predictions using the model
    prediction = model.predict(input_data)

    return render_template('result.html', prediction=prediction)


@app.route('/result', methods=['GET'])
def result():
    # Get the predicted disease name from the request
    predicted_disease = request.args.get('prediction', 'Unknown')

    # Match the predicted disease name with the disease names in the CSV file
    matched_disease = symptom_description[symptom_description['Disease'] == predicted_disease]

    # Check if the predicted disease name was found in the CSV file
    if not matched_disease.empty:
        # Retrieve the description for the predicted disease
        disease_description = matched_disease['Description'].values[0]
    else:
        # If the disease name was not found, set the description to a default value
        disease_description = "Description not available"

    # Render the result.html template with predicted disease name and description
    return render_template('result.html', prediction=predicted_disease, description=disease_description)

if __name__ == "__main__":
    app.run(debug=True)